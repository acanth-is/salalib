# Test scripts

# single dimension lists
x = [1,2]
x[1] = 10
x[1]

# multiple dimension lists
x = [[1,2],[3,4]]
x[0][1] = 10
x[0][1]

# range direct access
range(5,10)[2]

# simple for with error: i should be uninitialised
x = 0
for i in range(5,10):
    x = x + i
i

# for with else and 0 length ranges
int x = 0
for i in range(2,value("Ref Number")):
    x = x + i
    x
else:
    0

# if, function of a function on a range
x = len(range(1,value("Ref Number")))
if x == 2:
   return 5
elif x < 1:
   return 10
x
# first two objects should be set to 10, next to 5, and then ref number after that

# simple if
if value("Ref Number") < 2:
    0
elif value("Ref Number") == 3:
    5
else
    10

# various member functions tests
this.value("Ref Number")
len(range(1,this.value("Ref Number")))
range(1,this.value("Ref Number")).length()

# member function again
x = [[1,2],[3,4]]
x.length()

# Pythonesque curios: lists by reference
x = [1,2,3,4]
y = x
y[3] = 40
x[3]
# should return 40


# For a graph with 100000 segments for cpu timing:
x=value("Angular Connectivity")*value("Angular Step Depth")+value("Axial Line Ref")+value("Connectivity")/value("Segment Length")^value("T1024 Choice R1000 metric")
y=value("T1024 Choice R3000 metric")*value("T1024 Choice R4000 metric")/value("T1024 Choice R5000 metric")^value("T1024 Total Depth [Segment Length Wgt] R4000 metric")
y/x

# Total Depth Calculation
total_depth = 0
depth = 0
pop_list = [this]
push_list = []
setmark(true)
while len(pop_list):
    total_depth = total_depth + depth
    curs = pop_list.pop()
    for i in curs.connections():
        if i.mark() is none:
            i.setmark(true)
            push_list.append(i)
    if len(pop_list) == 0:
        depth = depth + 1
        pop_list = push_list
        push_list = []
total_depth

# Shortest Cycle
push_list = []
pop_list = []
live_paths = []
setmark([-1,0])
depth = 1
path_index = 0
for i in connections():
    pop_list.append([path_index,i])
    live_paths.append(1)
    i.setmark([path_index,depth])
    path_index = path_index + 1
if path_index < 2:
    return -1 # no cycle possible
live_path_count = path_index
while len(pop_list) and live_path_count > 1:
    curs = pop_list.pop()
    path_index = curs[0]
    this_node = curs[1]
    live_paths[path_index] = live_paths[path_index] - 1
    for i in this_node.connections():
        if i.mark() is none:
            i.setmark([path_index,depth+1])
            push_list.append([path_index,i])
            live_paths[path_index] = live_paths[path_index] + 1
        elif i.mark()[0] != path_index and i.mark()[0] != -1:
            # found a cycle!
            return i.mark()[1] + this_node.mark()[1] + 1
    if live_paths[path_index] == 0:
        live_path_count = live_path_count - 1
    if len(pop_list) == 0:
        depth = depth + 1
        pop_list = push_list
        push_list = []
-1 # no cycle found
